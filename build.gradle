import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget
import org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension
import org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile

plugins {
    id("org.jetbrains.kotlin.multiplatform").version("1.6.10")
    id("convention.publication")
    id("binary-compatibility-validator").version("0.8.0")
    id("io.gitlab.arturbosch.detekt").version("1.19.0")
}

group = "com.doublesymmetry"
version = "0.0.1"

repositories {
    google()
    mavenCentral()
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions {
                kotlinOptions.jvmTarget = "11"
                freeCompilerArgs = freeCompilerArgs + ["-Xjvm-default=all"]
            }
        }
    }

    js(BOTH) {
        compilations.all {
            kotlinOptions {
                moduleKind = "commonjs"
            }
        }
        browser()
        nodejs()
    }

    macosX64()
    macosArm64()
    ios()
    iosSimulatorArm64()
    watchos()
    watchosSimulatorArm64()
    tvos()
    tvosSimulatorArm64()

    linuxX64()
    mingwX64()

    sourceSets {
        commonMain
        commonTest

        jvmMain
        jvmTest

        nonJvmMain {
            dependsOn(commonMain)
            dependencies {
                implementation("org.jetbrains.kotlinx:atomicfu:0.17.2")
            }
        }

        nonJvmTest {
            dependsOn(commonTest)
        }

        targets.all { target ->
            if (target.platformType != KotlinPlatformType.jvm && target.platformType != KotlinPlatformType.androidJvm && target.platformType != KotlinPlatformType.common) {
                target.compilations["main"].defaultSourceSet {
                    dependsOn(nonJvmMain)
                }
                target.compilations["test"].defaultSourceSet {
                    dependsOn(nonJvmTest)
                }
            }
        }
        // Workaround for https://youtrack.jetbrains.com/issue/KT-51763
        // Make sure commonization runs before any compilation task.
        tasks.withType(KotlinNativeCompile).configureEach {
            it.dependsOn(tasks.named("commonize"))
        }

        all {
            languageSettings.optIn("kotlin.RequiresOptIn")
        }
    }
}

kotlin.targets.withType(KotlinNativeTarget.class) {
    binaries.all {
        binaryOptions["memoryModel"] = "experimental"
    }
}

rootProject.plugins.withType(Class.forName("org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin")) {
    rootProject.extensions.getByType(NodeJsRootExtension.class).nodeVersion = "16.0.0"
}
